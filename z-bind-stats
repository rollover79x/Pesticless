#!/usr/bin/python

import time
import sys
import os
import argparse
import json

JSONFILE = '/tmp/bindstats.json'
CACHELIFE = 300

parser = argparse.ArgumentParser()
parser.add_argument("action", help="discoverzones | counter | zonecounter | zonemaintenancecounter | resolvercounter | socketcounter | incounter | outcounter")
parser.add_argument("-z", help="zone")
parser.add_argument("-c", help="counter name")
parser.add_argument("-p", help="bind stats port")
args = parser.parse_args()

# Configurable port
port = 8053
if args.p:
	port = args.p

# Read from the cache if it exists and is less than a minute old, so we don't hit Bind directly too often.
if os.path.exists(JSONFILE) and time.time() - os.path.getmtime(JSONFILE) <= CACHELIFE:
	f = open(JSONFILE)
	j = json.load(f)
	f.close()
else:
	import httplib
	conn = httplib.HTTPConnection('localhost:{}'.format(port))
	conn.request('GET', '/')
	resp = conn.getresponse()
	if not resp.status == 200:
		print >> sys.stderr, "HTTP GET Failed"
		sys.exit(1)
	content = resp.read()
	conn.close()

	import xml.etree.ElementTree as ET
	root = ET.fromstring(content)

	# Build the JSON cache
	j = {
			'zones': {},
			'counter': {},
			'zonemaintenancecounter': {},
			'resolvercounter': {},
			'socketcounter': {},
			'incounter': {},
			'outcounter': {},
			}
	for view in root.findall('./bind/statistics/views/view'):
		if view.findtext('./name') in ('_default',):
			for zone in view.findall('./zones/zone'):
				if zone.find('./counters') is not None:
					counters = {}
					for counter in zone.findall('./counters/*'):
						counters[counter.tag] = counter.text
					j['zones'][zone.findtext('./name')] = counters
	for stat in root.findall('./bind/statistics/server/nsstat'):
		j['counter'][stat.findtext('./name')] = stat.findtext('./counter')
	for stat in root.findall('./bind/statistics/server/zonestat'):
		j['zonemaintenancecounter'][stat.findtext('./name')] = stat.findtext('./counter')
	for view in root.findall('./bind/statistics/views/view'):
		if view.findtext('./name') in ('_default',):
			for stat in view.findall('./resstat'):
				j['resolvercounter'][stat.findtext('./name')] = stat.findtext('./counter')
	for stat in root.findall('./bind/statistics/server/sockstat'):
		j['socketcounter'][stat.findtext('./name')] = stat.findtext('./counter')
	for stat in root.findall('./bind/statistics/server/queries-in/rdtype'):
		j['incounter'][stat.findtext('./name')] = stat.findtext('./counter')
	for stat in root.findall('./bind/statistics/views/view/rdtype'):
		j['outcounter'][stat.findtext('./name')] = stat.findtext('./counter')

	f = open(JSONFILE, 'w')
	json.dump(j, f)
	f.close()

if args.action == 'discoverzones':
	d = { 'data': [{'{#ZONE}': zone} for zone in j['zones'].keys()] }
	print json.dumps(d)
	sys.exit(0)

elif args.action == 'zonecounter':
	if not (args.z and args.c):
		print >> sys.stderr, "Missing argument"
		print "ZBX_NOTSUPPORTED"
		sys.exit(1)
	if j['zones'].has_key(args.z) and j['zones'][args.z].has_key(args.c):
		print j['zones'][args.z][args.c]
		sys.exit(0)
	else:
		print "ZBX_NOTSUPPORTED"
		sys.exit(1)

else:
	if not args.c:
		print >> sys.stderr, "Missing argument"
		print "ZBX_NOTSUPPORTED"
		sys.exit(1)
	if j[args.action].has_key(args.c):
		print j[args.action][args.c]
		sys.exit(0)
	else:
		print "ZBX_NOTSUPPORTED"
		sys.exit(1)
